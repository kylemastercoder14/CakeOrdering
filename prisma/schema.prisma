generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  id              String  @id @default(cuid())
  clerkId         String
  name            String
  email           String  @unique
  password        String?
  address         String?
  phoneNumber     String?
  imageUrl        String?
  gender          String?
  dateOfBirth     String?
  customizedCount Int?    @default(3)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Orders         Orders[]
  CustomizedCake CustomizedCake[]
  Review         Review[]
}

model Categories {
  id          String @id @default(cuid())
  name        String
  description String
  imageUrl    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Products[]
}

model Products {
  id           String   @id @default(cuid())
  name         String
  description  String
  flavors      String[]
  sizes        String[]
  allergens    String[]
  price        Float
  imageUrl     String
  isFeatured   Boolean  @default(true)
  status       String   @default("In stock")
  isCustomized Boolean  @default(false)

  categoryId String
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  promotionId String?
  promotion   Promotions? @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  OrderItems OrderItems[]
  Review     Review[]

  @@index([categoryId])
  @@index([promotionId])
}

model Orders {
  id             String  @id @default(cuid())
  name           String
  orderNumber    String  @unique
  totalAmount    Float
  orderStatus    String  @default("Pending")
  message        String?
  paymentOption  String
  proofOfPayment String?

  cancellationReason String?
  cancelledAt        DateTime?

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems     OrderItems[]
  refund         Refund[]
  CustomizedCake CustomizedCake[]

  @@index([userId])
}

model OrderItems {
  id        String @id @default(cuid())
  quantity  Int
  subTotal  Float
  productId String
  orderId   String

  product Products @relation(fields: [productId], references: [id])
  order   Orders   @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
}

model Promotions {
  id          String @id @default(cuid())
  name        String
  description String
  imageUrl    String
  discount    Float
  startDate   String
  endDate     String
  status      String @default("Active")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Products[]
}

model Blogs {
  id       String @id @default(cuid())
  title    String
  content  String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logs {
  id     String @id @default(cuid())
  action String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String @id @default(cuid())
  firstName String
  lastName  String
  email     String
  password  String
  role      String @default("Staff")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model About {
  id         String @id @default(cuid())
  storeName  String
  imageUrl   String
  mission    String
  vision     String
  coreValues String
  logo       String
  content    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id           String @id @default(cuid())
  email        String
  phone        String
  googleMapUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socials Socials[]
}

model Socials {
  id       String @id @default(cuid())
  platform String
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactId String
  contact   Contact @relation(fields: [contactId], references: [id])

  @@index([contactId])
}

model Faqs {
  id       String @id @default(cuid())
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policies {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String @id @default(cuid())
  name    String
  email   String
  subject String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Refund {
  id     String @id @default(cuid())
  reason String
  status String @default("Pending")

  orderId String
  order   Orders @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model CustomizedCake {
  id              String    @id @default(cuid())
  theme           String
  size            String
  shape           String
  layers          String
  flavor          String
  icingType       String
  additionalNotes String?
  imageUrl        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  price           Float
  status          String    @default("Pending") // Pending, Approved, Rejected
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  deliveryDate    DateTime?
  deliveryAddress String?

  orderId String?
  order   Orders? @relation(fields: [orderId], references: [id])

  userId String?
  user   Users?  @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Products @relation(fields: [productId], references: [id])

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

